import os
import glob
import time

JOBDIR=os.path.abspath(os.path.curdir)
TGTDIR=os.path.abspath(os.path.curdir+"/../roundtrips/")

ALLTIFFS=glob.glob(JOBDIR+"/*.tif")
ALLSTEMS=[ os.path.splitext(os.path.basename(item))[0] for item in ALLTIFFS ]

pipelines = {
    "lossless":"bitswap1->lz4",
    "frameshuffle":"frame_shuffle->bitswap1->lz4",
    "purelz4":"lz4",
    "rmestbkrd":"rmestbkrd->bitswap1->lz4",
    "rasterreorder4":"raster_reorder(tile_size=4)->bitswap1->lz4",
    "zcurvereorder4":"zcurve_reorder(tile_size=4)->bitswap1->lz4",
    "rasterreorder16":"raster_reorder(tile_size=16)->bitswap1->lz4",
    "zcurvereorder16":"zcurve_reorder(tile_size=16)->bitswap1->lz4",
    "x264":"quantiser->h264",
    "x265":"quantiser->hevc",
    "quant_lz4":"quantiser->lz4"

}


EXPECTED = [ ]
for key,value in pipelines.items():
    if "x26" in key:
        #excluding Svoboda (for reasons of dimension incompatible to video codecs) and flybrain (see issue #37)
        EXPECTED.extend([ "{dstfolder}/{stem}_{key}_rt.tif".format(dstfolder=TGTDIR,stem=item, key=key) for item in ALLSTEMS if not( "Svoboda" in item or "flybrain" in item )])
        EXPECTED.extend([ "{dstfolder}/{stem}_{key}.sqy".format(dstfolder=TGTDIR,stem=item, key=key) for item in ALLSTEMS if not( "Svoboda" in item or "flybrain" in item )])
    else:
        EXPECTED.extend([ "{dstfolder}/{stem}_{key}_rt.tif".format(dstfolder=TGTDIR,stem=item, key=key) for item in ALLSTEMS ])
        EXPECTED.extend([ "{dstfolder}/{stem}_{key}.sqy".format(dstfolder=TGTDIR,stem=item, key=key) for item in ALLSTEMS ])




GLOBALTIMESTAMP = int(time.time())

if not config or not ("sqy-app" in config.keys()):
    config["sqy-app"] = "/home/steinbac/development/sqeazy/src/cpp/exp_build/src/sqy"

if not config or not ("setup-cmd" in config.keys()):
    config["setup-cmd"] = "module load ffmpeg/3.0.7-x264-hevc lz4/1.7.5 hdf5/1.8.17"


rule all:
    input:
        EXPECTED
    message:
        " creating {input} "

rule enc_lossless:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_lossless.sqy"
    threads: 8
    params:
        pipeline="bitswap1->lz4", shorthand="lossless"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """


rule enc_frameshuffle:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_frameshuffle.sqy"
    threads: 8
    params:
        pipeline="frame_shuffle->bitswap1->lz4", shorthand="frameshuffle"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_purelz4:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_purelz4.sqy"
    threads: 8
    params:
        pipeline="lz4", shorthand="purelz4"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_rmestbkrd:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_rmestbkrd.sqy"
    threads: 8
    params:
        pipeline="rmestbkrd->bitswap1->lz4", shorthand="rmestbkrd"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_rasterreorder4:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_rasterreorder4.sqy"
    threads: 8
    params:
        pipeline="raster_reorder(tile_size=4)->bitswap1->lz4", shorthand="rasterreorder4"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_zcurvereorder4:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_zcurvereorder4.sqy"
    threads: 8
    params:
        pipeline="zcurve_reorder(tile_size=4)->bitswap1->lz4", shorthand="zcurvereorder4"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_rasterreorder16:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_rasterreorder16.sqy"
    threads: 8
    params:
        pipeline="raster_reorder(tile_size=16)->bitswap1->lz4", shorthand="rasterreorder16"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_zcurvereorder16:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_zcurvereorder16.sqy"
    threads: 8
    params:
        pipeline="zcurve_reorder(tile_size=16)->bitswap1->lz4", shorthand="zcurvereorder16"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_x264:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_x264.sqy"
    threads: 8
    params:
        pipeline="quantiser->h264", shorthand="x264"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule test_x264_only:
    input:
        [ "{dstfolder}/{stem}_{key}_rt.tif".format(dstfolder=TGTDIR,stem=item, key="x264") for item in ALLSTEMS ]
    message:
        " creating {input} "

rule test_x265_only:
    input:
        [ "{dstfolder}/{stem}_{key}_rt.tif".format(dstfolder=TGTDIR,stem=item, key="x265") for item in ALLSTEMS ]
    message:
        " creating {input} "



rule enc_x265:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_x265.sqy"
    threads: 8
    params:
        pipeline="quantiser->hevc", shorthand="x265"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule enc_quant_lz4:
    input:
        "{stem}.tif"
    output:
        "{TGTDIR}/{stem}_quant_lz4.sqy"
    threads: 8
    params:
        pipeline="quantiser->lz4", shorthand="quant_lz4"
    shell:
        """
        {config[setup-cmd]};
        dd if={input} of=/dev/null && hostname ;
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"encode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} enc -p \"{params.pipeline}\" -n {threads} -o {output} {input}
        """

rule test_quant_lz4_only:
    input:
        [ "{dstfolder}/{stem}_{key}_rt.tif".format(dstfolder=TGTDIR,stem=item, key="quant_lz4") for item in ALLSTEMS ]
    message:
        " creating {input} "

rule dec_lossless:
    input:
        "{TGTDIR}/{stem}_lossless.sqy"
    output:
        "{TGTDIR}/{stem}_lossless_rt.tif"
    threads: 8
    params:
        pipeline="bitswap1->lz4", shorthand="lossless"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input} ;
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """


rule dec_frameshuffle:
    input:
        "{TGTDIR}/{stem}_frameshuffle.sqy"
    output:
        "{TGTDIR}/{stem}_frameshuffle_rt.tif"
    threads: 8
    params:
        pipeline="frame_shuffle->bitswap1->lz4", shorthand="frameshuffle"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_purelz4:
    input:
        "{TGTDIR}/{stem}_purelz4.sqy"
    output:
        "{TGTDIR}/{stem}_purelz4_rt.tif"
    threads: 8
    params:
        pipeline="lz4", shorthand="purelz4"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_rmestbkrd:
    input:
        "{TGTDIR}/{stem}_rmestbkrd.sqy"
    output:
        "{TGTDIR}/{stem}_rmestbkrd_rt.tif"
    threads: 8
    params:
        pipeline="rmestbkrd->bitswap1->lz4", shorthand="rmestbkrd"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_rasterreorder4:
    input:
        "{TGTDIR}/{stem}_rasterreorder4.sqy"
    output:
        "{TGTDIR}/{stem}_rasterreorder4_rt.tif"
    threads: 8
    params:
        pipeline="raster_reorder(tile_size=16)->bitswap1->lz4", shorthand="rasterreorder4"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_rasterreorder16:
    input:
        "{TGTDIR}/{stem}_rasterreorder16.sqy"
    output:
        "{TGTDIR}/{stem}_rasterreorder16_rt.tif"
    threads: 8
    params:
        pipeline="raster_reorder(tile_size=16)->bitswap1->lz4", shorthand="rasterreorder16"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """


rule dec_zcurvereorder4:
    input:
        "{TGTDIR}/{stem}_zcurvereorder4.sqy"
    output:
        "{TGTDIR}/{stem}_zcurvereorder4_rt.tif"
    threads: 8
    params:
        pipeline="zcurve_reorder(tile_size=16)->bitswap1->lz4", shorthand="zcurvereorder4"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_zcurvereorder16:
    input:
        "{TGTDIR}/{stem}_zcurvereorder16.sqy"
    output:
        "{TGTDIR}/{stem}_zcurvereorder16_rt.tif"
    threads: 8
    params:
        pipeline="zcurve_reorder(tile_size=16)->bitswap1->lz4", shorthand="zcurvereorder16"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_x264:
    input:
        "{TGTDIR}/{stem}_x264.sqy"
    output:
        "{TGTDIR}/{stem}_x264_rt.tif"
    threads: 8
    params:
        pipeline="quantiser->h264", shorthand="x264"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_x265:
    input:
        "{TGTDIR}/{stem}_x265.sqy"
    output:
        "{TGTDIR}/{stem}_x265_rt.tif"
    threads: 8
    params:
        pipeline="quantiser->hevc", shorthand="x265"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """

rule dec_quant_lz4:
    input:
        "{TGTDIR}/{stem}_quant_lz4.sqy"
    output:
        "{TGTDIR}/{stem}_quant_lz4_rt.tif"
    threads: 8
    params:
        pipeline="quantiser->lz4", shorthand="quant_lz4"
    shell:
        """
        {config[setup-cmd]};
        /usr/bin/time --append -o {TGTDIR}/{wildcards.stem}-compression.csv -f \"decode,{wildcards.stem},{params.pipeline},%e,%U,%S,%x,{threads},{GLOBALTIMESTAMP}\" {config[sqy-app]} dec -n {threads} -o {output} {input};
        echo "{wildcards.stem},{params.pipeline},{GLOBALTIMESTAMP},$({config[sqy-app]} compare -m all --as-csv --noheader {wildcards.stem}.tif {output})" >> {TGTDIR}/{wildcards.stem}-quality.csv;
        """



rule clean:
    input:
        EXPECTED, glob.glob(TGTDIR+"/*csv"), glob.glob(TGTDIR+"/*log") #, glob.glob(TGTDIR+"/*tif"), glob.glob(TGTDIR+"/*sqy")
    shell:
        "rm -vf {input}"
