INCLUDE_DIRECTORIES(.)
IF(WIN32)
SET(Boost_USE_STATIC_LIBS ON)
add_library(ext_lz4 STATIC IMPORTED)
set_target_properties(ext_lz4 PROPERTIES IMPORTED_LOCATION "${LZ4_STATIC_LIB}") 
ELSE(WIN32)
add_library(ext_lz4 SHARED IMPORTED)
set_target_properties(ext_lz4 PROPERTIES IMPORTED_LOCATION "${LZ4_SHARED_LIB}") 
ENDIF(WIN32)





FIND_PACKAGE (Boost 1.42 QUIET COMPONENTS system filesystem program_options REQUIRED)
IF(Boost_FOUND)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS}) 
ENDIF()


FIND_PACKAGE(TIFF REQUIRED)

IF(TIFF_FOUND)
IF(WIN32)
add_library(ext_tiff STATIC IMPORTED)
set_target_properties(ext_tiff PROPERTIES IMPORTED_LOCATION "${TIFF_LIBRARIES}") 
ELSE(WIN32)
add_library(ext_tiff SHARED IMPORTED)
set_target_properties(ext_tiff PROPERTIES IMPORTED_LOCATION "${TIFF_LIBRARIES}") 
ENDIF(WIN32)
MESSAGE("::BENCH:: using ${TIFF_LIBRARIES} for tiff")

add_executable(bench bench.cpp)
target_link_libraries(bench ext_tiff ext_lz4 ${Boost_LIBRARIES})
IF(UNIX)
SET(BENCH_COMPILE_FLAGS "-I${PROJECT_SOURCE_DIR}/src")
ELSE(UNIX)
  IF(${CMAKE_C_COMPILER_ID} MATCHES "MSVC" OR ${CMAKE_CXX_COMPILER_ID} MATCHES "MSVC")
    SET(BENCH_COMPILE_FLAGS "/I${PROJECT_SOURCE_DIR}/src")
  ENDIF()
ENDIF(UNIX)



IF(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
IF(HAS_CPP11_COMPILERFLAG)
SET(BENCH_COMPILE_FLAGS "${BENCH_COMPILE_FLAGS} -std=c++11")
ENDIF()
ENDIF()

if(SQY_VERBOSE)
list(APPEND BENCH_COMPILE_FLAGS " -D_SQY_VERBOSE_=1")
endif(SQY_VERBOSE)

STRING(REPLACE ";" " " BENCH_COMPILE_FLAGS ${BENCH_COMPILE_FLAGS})
MESSAGE(STATUS ">> adding compile flag to bench: ${BENCH_COMPILE_FLAGS}")
set_target_properties(bench PROPERTIES COMPILE_FLAGS "${BENCH_COMPILE_FLAGS}")

add_executable(sqy sqy.cpp)

target_link_libraries(sqy ext_tiff ext_lz4 ${Boost_LIBRARIES})

IF(UNIX)
SET(SQY_COMPILE_FLAGS "-I${PROJECT_SOURCE_DIR}/src")
ELSE(UNIX)
  IF(${CMAKE_C_COMPILER_ID} MATCHES "MSVC" OR ${CMAKE_CXX_COMPILER_ID} MATCHES "MSVC")
    SET(SQY_COMPILE_FLAGS "/I${PROJECT_SOURCE_DIR}/src")
  ENDIF()
ENDIF(UNIX)

IF(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
IF(HAS_CPP11_COMPILERFLAG)
SET(SQY_COMPILE_FLAGS "${SQY_COMPILE_FLAGS} -std=c++11")
ENDIF()
ENDIF()

if(SQY_VERBOSE)
IF(UNIX)
list(APPEND SQY_COMPILE_FLAGS " -D_SQY_VERBOSE_=1")
ELSE(UNIX)
IF(${CMAKE_C_COMPILER_ID} MATCHES "MSVC" OR ${CMAKE_CXX_COMPILER_ID} MATCHES "MSVC")
list(APPEND SQY_COMPILE_FLAGS " /D_SQY_VERBOSE_=1")
ENDIF()
ENDIF(UNIX)
endif(SQY_VERBOSE)

STRING(REPLACE ";" " " SQY_COMPILE_FLAGS ${SQY_COMPILE_FLAGS})
MESSAGE(STATUS ">> adding compile flag to sqy: ${SQY_COMPILE_FLAGS}")
set_target_properties(sqy PROPERTIES COMPILE_FLAGS "${SQY_COMPILE_FLAGS}")



FIND_PACKAGE(ROOT QUIET)
IF(ROOT_FOUND)
add_executable(histo histo.cpp)
target_link_libraries(histo ext_tiff ${ROOT_LIBRARIES} ${Boost_LIBRARIES})

execute_process(
    COMMAND ${ROOT_CONFIG_EXECUTABLE} --cflags
    OUTPUT_VARIABLE ROOT_INCLUDE_FLAGS
    OUTPUT_STRIP_TRAILING_WHITESPACE)

IF(UNIX)
	SET(HISTO_COMPILE_FLAGS "${ROOT_INCLUDE_FLAGS} -I${PROJECT_SOURCE_DIR}/src")
	ELSE(UNIX)
	SET(HISTO_COMPILE_FLAGS "${ROOT_INCLUDE_FLAGS} /I${PROJECT_SOURCE_DIR}/src")
	ENDIF(UNIX)
	
IF(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
IF(HAS_CPP11_COMPILERFLAG)
SET(HISTO_COMPILE_FLAGS "${HISTO_COMPILE_FLAGS} -std=c++11")
ENDIF()
ENDIF()

if(SQY_VERBOSE)
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC" OR ${CMAKE_C_COMPILER_ID} STREQUAL "MSVC")
list(APPEND HISTO_COMPILE_FLAGS " /D_SQY_VERBOSE_=1")
ELSE()
list(APPEND HISTO_COMPILE_FLAGS " -D_SQY_VERBOSE_=1")
ENDIF()
endif(SQY_VERBOSE)

STRING(REPLACE ";" " " HISTO_COMPILE_FLAGS ${HISTO_COMPILE_FLAGS})
set_target_properties(histo PROPERTIES COMPILE_FLAGS "${HISTO_COMPILE_FLAGS}")
MESSAGE(STATUS ">> adding compile flag to histo: ${HISTO_COMPILE_FLAGS}")
ELSE(ROOT_FOUND)
MESSAGE(STATUS ">> Skipping optional bench/histo utility, ROOT libraries not found!")
ENDIF(ROOT_FOUND)


ELSE(TIFF_FOUND)
WARNING("Skipping benchmark utils, libtiff not found (but required for build)\!")
ENDIF(TIFF_FOUND)


